<templateSet group="React">
  <template name="props" value="const {$VAR$} = this.props;" description="Access component's props" toReformat="true" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="state" value="const {$VAR$} = this.state;" description="Access component's state" toReformat="true" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="set" value="this.setState({$VAR$});" description="" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="rc" value="&lt;Row&gt;&#10;    &lt;Col span={$VAR$}&gt;&#10;        $END$&#10;    &lt;/Col&gt;&#10;&lt;/Row&gt;" description="Row Col" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="get" value="const params = {};&#10;this.setState({loading: true});&#10;this.props.ajax.get('$END$', params)&#10;    .then(res =&gt; {&#10;&#10;    })&#10;    .finally(() =&gt; this.setState({loading: false}));" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="post" value="const params = {};&#10;this.setState({loading: true});&#10;this.props.ajax.post('$END$', params)&#10;    .then(res =&gt; {&#10;&#10;    })&#10;    .finally(() =&gt; this.setState({loading: false}));" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="put" value="const params = {};&#10;this.setState({loading: true});&#10;this.props.ajax.put('$END$', params)&#10;    .then(res =&gt; {&#10;&#10;    })&#10;    .finally(() =&gt; this.setState({loading: false}));" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="del" value="this.setState({deleting: true});&#10;this.props.ajax.del('$END$')&#10;    .then(res =&gt; {&#10;&#10;    })&#10;    .finally(() =&gt; this.setState({deleting: false}));" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="handleSubmit" value="handleSubmit = (e) =&gt; {&#10;    e &amp;&amp; e.preventDefault();&#10;&#10;    if (this.state.loading) return;&#10;        &#10;    this.props.form.validateFieldsAndScroll((err, values) =&gt; {&#10;        if (err) return;&#10;&#10;        const params = values;&#10;        this.setState({loading: true});&#10;        this.props.ajax.post('', params)&#10;            .then(res =&gt; {&#10;                console.log(res);&#10;            })&#10;            .finally(() =&gt; this.setState({loading: false}));&#10;    })&#10;};" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="rcc" value="import React, { Component } from 'react';&#10;&#10;export default class $TM_FILENAME_BASE$ extends Component {&#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;" description="Creates a React component class with ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rccp" value="import React, { Component } from 'react';&#10;import PropTypes from 'prop-types';&#10;&#10;export default class $TM_FILENAME_BASE$ extends Component {&#10; static propTypes = {};   &#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;    $END$&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}" description="Creates a React component class with PropTypes and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()));" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rcfc" value="import React, { Component } from 'react';&#10;import PropTypes from 'prop-types';&#10;&#10;export default class $TM_FILENAME_BASE$ extends Component {&#10; constructor(props) {&#10;  super(props);&#10;&#10; }&#10; static propTypes = {&#10;&#10; };&#10; componentWillMount() {&#10;&#10; }&#10;&#10; componentDidMount() {&#10;&#10; }&#10;&#10; componentWillReceiveProps(nextProps) {&#10;&#10; }&#10;&#10; shouldComponentUpdate(nextProps, nextState) {&#10;&#10; }&#10;&#10; componentWillUpdate(nextProps, nextState) {&#10;&#10; }&#10;&#10; componentDidUpdate(prevProps, prevState) {&#10;&#10; }&#10;&#10; componentWillUnmount() {&#10;&#10; }&#10;&#10; render() {&#10;  return (&#10;   &lt;div&gt;&#10;&#10;   &lt;/div&gt;&#10;  );&#10; }&#10;}&#10;" description="Creates a React component class with PropTypes and all lifecycle methods and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="ue" value="useEffect(() =&gt; {&#10;    (async () =&gt; {&#10;        &#10;    })();&#10;}, [$END$]);" description="useEffect" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="us" value="const [$1$, set$2$] = useState($END$);" description="useState" toReformat="false" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="2" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="uget" value="const {data, run: fetch$1$} = props.ajax.useGet('/');" description="" toReformat="false" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="upost" value="const {run: save$1$} = props.ajax.usePost('/', null, {setLoading, successTip: '添加成功！'});" description="" toReformat="false" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="uput" value="const {run: update$1$} = props.ajax.usePut('/', null, {setLoading, successTip: '修改成功！'});" description="" toReformat="false" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="udel" value="const {run: delete$1$} = props.ajax.useDel('/', null, {setLoading, successTip: '删除成功！'});" description="" toReformat="false" toShortenFQNames="true">
    <variable name="1" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
</templateSet>