<templateSet group="JavaScript">
  <template name="arr" value="() =&gt; {&#10;  $END$&#10;};" description="arrow function - ES2015" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="JS_EXPRESSION" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="listPage" value="import React, {Component} from 'react';&#10;import config from '@/commons/config-hoc';&#10;import PageContent from '@/layouts/page-content';&#10;import {&#10;    QueryBar,&#10;    QueryItem,&#10;    Pagination,&#10;    ToolBar,&#10;    Operator&#10;} from &quot;@/library/antd&quot;;&#10;import Table from '@/components/table';&#10;import EditModal from './EditModal';&#10;&#10;@config({&#10;    path: '/xxx',&#10;    ajax: true,&#10;})&#10;export default class index extends Component {&#10;    state = {&#10;        loading: false,&#10;        dataSource: [],     // 表格数据&#10;        total: 0,           // 分页中条数&#10;        pageSize: 50,       // 分页每页显示条数&#10;        pageNum: 1,         // 分页当前页&#10;        params: {},         // 查询条件&#10;        visible: false,&#10;        id: null,&#10;    };&#10;&#10;    queryItems = [&#10;        [&#10;            {&#10;                field: 'name',&#10;                label: '名称',&#10;                width: 300,&#10;            },&#10;        ],&#10;    ];&#10;&#10;    columns = [&#10;        {title: '编号', key: '__num', width: 40, render: (value, record, index) =&gt; (index + 1) + this.state.pageSize * (this.state.pageNum - 1)},&#10;        {title: '名称', dataIndex: 'name', width: 100},&#10;        {&#10;            title: '操作',&#10;            dataIndex: 'operator',&#10;            width: 200,&#10;            render: (value, record) =&gt; {&#10;                const {id} = record;&#10;                const items = [&#10;                    {&#10;                        label: '编辑',&#10;                        onClick: () =&gt; this.setState({visible: true, id}),&#10;                    },&#10;                    {&#10;                        label: '删除',&#10;                        color: 'red',&#10;                        confirm: {&#10;                            title: '您确定删除此条记录？',&#10;                            onConfirm: () =&gt; this.handleDelete(id),&#10;                        }&#10;                    },&#10;                ];&#10;                return &lt;Operator items={items}/&gt;&#10;            },&#10;        }&#10;    ];&#10;&#10;    componentDidMount() {&#10;        this.handleSearch();&#10;    }&#10;&#10;    handleSearch = () =&gt; {&#10;        if (this.state.loading) return;&#10;&#10;        const {params, pageNum, pageSize} = this.state;&#10;&#10;        this.setState({loading: true});&#10;        // TODO&#10;        this.props.ajax&#10;            .get('/xxx', {...params, pageNum, pageSize})&#10;            .then((res) =&gt; {&#10;                const dataSource = res?.recordList || [];&#10;                const total = res?.recordCount || 0;&#10;&#10;                this.setState({dataSource, total});&#10;            })&#10;            .finally(() =&gt; this.setState({loading: false}));&#10;    };&#10;&#10;    handleDelete = (id) =&gt; {&#10;        this.props.ajax.del(`/xxx/${id}`, null, {successTip: '删除成功！'})&#10;            .then(() =&gt; {&#10;                this.handleSearch();&#10;            });&#10;    };&#10;&#10;    render() {&#10;        const {&#10;            total,&#10;            pageNum,&#10;            pageSize,&#10;            dataSource,&#10;            loading,&#10;            visible,&#10;            id,&#10;        } = this.state;&#10;        return (&#10;            &lt;PageContent&gt;&#10;                &lt;QueryBar&gt;&#10;                    &lt;QueryItem&#10;                        items={this.queryItems}&#10;                        onSubmit={params =&gt; this.setState({params}, this.handleSearch)}&#10;                    /&gt;&#10;                &lt;/QueryBar&gt;&#10;&#10;                &lt;ToolBar&#10;                    items={[&#10;                        {text: '新建', icon: 'plus', onClick: () =&gt; this.setState({visible: true, id: null})},&#10;                    ]}&#10;                /&gt;&#10;&#10;                &lt;Table&#10;                    loading={loading}&#10;                    columns={this.columns}&#10;                    dataSource={dataSource}&#10;                    rowKey=&quot;id&quot;&#10;                    pagination={false}&#10;                /&gt;&#10;&#10;                &lt;Pagination&#10;                    total={total}&#10;                    pageNum={pageNum}&#10;                    pageSize={pageSize}&#10;                    onPageNumChange={pageNum =&gt; this.setState({pageNum}, this.handleSearch)}&#10;                    onPageSizeChange={pageSize =&gt; this.setState({pageSize, pageNum: 1}, this.handleSearch)}&#10;                /&gt;&#10;&#10;                &lt;EditModal&#10;                    visible={visible}&#10;                    id={id}&#10;                    onOk={() =&gt; this.setState({visible: false}, this.handleSearch)}&#10;                    onCancel={() =&gt; this.setState({visible: false})}&#10;                /&gt;&#10;            &lt;/PageContent&gt;&#10;        );&#10;    }&#10;}&#10;" description="react-admin 列表页" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="editModal" value="import React, {Component} from 'react';&#10;import {Form, Row, Col, Button, Spin} from 'antd';&#10;import _ from 'lodash';&#10;import {FormElement} from '@/library/antd';&#10;import PageContent from '@/layouts/page-content';&#10;import config from '@/commons/config-hoc';&#10;import validator from '@/library/utils/validation-rule';&#10;import modal from '@/components/modal-hoc';&#10;&#10;@config({ajax: true})&#10;@Form.create()&#10;@modal(props =&gt; props.id === null ? '添加用户' : '修改用户')&#10;export default class EditModal extends Component {&#10;    state = {&#10;        loading: false,&#10;        data: {}, // 表单回显数据&#10;    };&#10;&#10;    componentDidMount() {&#10;        const {id} = this.props;&#10;&#10;        const isEdit = id !== null;&#10;&#10;        if (isEdit) {&#10;            this.setState({loading: true});&#10;            this.props.ajax.get(`/xxx/${id}`)&#10;                .then(res =&gt; {&#10;                    this.setState({data: res || {}});&#10;                })&#10;                .finally(() =&gt; this.setState({loading: false}));&#10;        }&#10;    }&#10;&#10;&#10;    handleOk = () =&gt; {&#10;        if (this.state.loading) return; // 防止重复提交&#10;&#10;        this.props.form.validateFieldsAndScroll((err, values) =&gt; {&#10;            if (err) return;&#10;&#10;            const {id} = this.props;&#10;            const isEdit = id !== null;&#10;&#10;            if (isEdit) {&#10;                this.setState({loading: true});&#10;                this.props.ajax.put('/xxx', values, {successTip: '修改成功！'})&#10;                    .then(() =&gt; {&#10;                        const {onOk} = this.props;&#10;                        onOk &amp;&amp; onOk();&#10;                    })&#10;                    .finally(() =&gt; this.setState({loading: false}));&#10;            } else {&#10;                this.props.ajax.post('/xxx', values, {successTip: '添加成功！'})&#10;                    .then(() =&gt; {&#10;                        const {onOk} = this.props;&#10;                        onOk &amp;&amp; onOk();&#10;                    })&#10;                    .finally(() =&gt; this.setState({loading: false}));&#10;            }&#10;        });&#10;    };&#10;&#10;&#10;    // 节流校验写法&#10;    userNameExist = _.debounce((rule, value, callback) =&gt; {&#10;        console.log('节流发请求');&#10;    }, 500);&#10;&#10;    handleCancel = () =&gt; {&#10;        const {onCancel} = this.props;&#10;        onCancel &amp;&amp; onCancel();&#10;    };&#10;&#10;    handleReset = () =&gt; {&#10;        this.props.form.resetFields();&#10;    };&#10;&#10;    // 这样可以保证每次render时，FormElement不是每次都创建，这里可以进行一些共用属性的设置&#10;    FormElement = (props) =&gt; &lt;FormElement form={this.props.form} labelWidth={100} disabled={this.props.isDetail} {...props}/&gt;;&#10;&#10;    render() {&#10;        const {id} = this.props;&#10;        const isEdit = id !== null;&#10;        const {loading, data} = this.state;&#10;&#10;        const FormElement = this.FormElement;&#10;        return (&#10;            &lt;Spin spinning={loading}&gt;&#10;                &lt;PageContent footer={false}&gt;&#10;                    &lt;Form onSubmit={this.handleSubmit}&gt;&#10;                        {isEdit ? &lt;FormElement type=&quot;hidden&quot; field=&quot;id&quot; initialValue={data.id}/&gt; : null}&#10;                        &lt;Row&gt;&#10;                            &lt;Col span={24}&gt;&#10;                                &lt;FormElement&#10;                                    label=&quot;名称&quot;&#10;                                    field=&quot;name&quot;&#10;                                    initialValue={data.name}&#10;                                    required&#10;                                    rules={[&#10;                                        validator.noSpace(),&#10;                                        validator.userNameExist(),&#10;                                        {validator: this.userNameExist}&#10;                                    ]}&#10;                                /&gt;&#10;                            &lt;/Col&gt;&#10;                        &lt;/Row&gt;&#10;                    &lt;/Form&gt;&#10;                &lt;/PageContent&gt;&#10;                &lt;div className=&quot;ant-modal-footer&quot;&gt;&#10;                    &lt;Button onClick={this.handleOk} type=&quot;primary&quot;&gt;保存&lt;/Button&gt;&#10;                    &lt;Button onClick={this.handleReset}&gt;重置&lt;/Button&gt;&#10;                    &lt;Button onClick={this.handleCancel}&gt;取消&lt;/Button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/Spin&gt;&#10;        );&#10;    }&#10;}&#10;&#10;" description="react-admin 编辑弹框" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ar" value="() =&gt; $END$" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="us" value="&quot;use strict&quot;;&#10;$END$" description="Inserts 'use strict' statement" toReformat="true" toShortenFQNames="true" deactivated="true">
    <context />
  </template>
</templateSet>